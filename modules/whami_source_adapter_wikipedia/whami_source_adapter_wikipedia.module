<?php
/**
 * @file
 * whami Source Adapter Wikipedia module
 *
 * This module takes geographic data as input and returns Wikipedia articles
 * that are "geograpically near" to the input geo data
 */

/**
 * Implements hook_block().
 */
function whami_source_adapter_wikipedia_block($op = 'list', $delta = 0, $edit = array()) {
  module_load_include('inc', 'whami_source_adapter');
  module_load_include('inc', 'whami_source_adapter_wikipedia');

  switch ($op) {
    case 'list':
      return array(
        'whami_wikipedia_place_by_url' => array('info' => t('whami Source Adapter: Wikipedia info'), 'cache' => BLOCK_CACHE_PER_PAGE),
        'whami_wikipedia_places_nearby' => array('info' => t('whami Source Adapter: Wikipedia nearby'), 'cache' => BLOCK_CACHE_PER_PAGE),
      );

    case 'configure':
      if(strcmp($delta, 'whami_wikipedia_places_nearby') == 0) {
        return _whami_source_adapter_block_config_form('wikipedia', $delta, array("geofield"));
      }
      if(strcmp($delta, 'whami_wikipedia_place_by_url') == 0) {
        return _whami_source_adapter_block_config_form('wikipedia', $delta, array("linkfield"));
      }

    case 'save':
      _whami_source_adapter_block_config_save('wikipedia', $delta, $edit);
      break;

    case 'view':
      $block = array();

      $nid = check_plain(arg(1));
      if (strcmp(arg(0), 'node') == 0 && is_numeric($nid) && !arg(2)) {
        $node = node_load($nid);

        if ($node !== FALSE) {

          //Check if the block is activated for this content type
          if( !variable_get(_whami_source_adapter_conf_variable_name('wikipedia', $delta, $node->type, 'active'), false) ) return;

          $langcode = $GLOBALS['language']->language;
          $node_lang = strlen($node->language) ? $node->language : $langcode;

          if(strcmp($delta, 'whami_wikipedia_places_nearby') == 0) {

            $geo_field_name = variable_get(_whami_source_adapter_conf_variable_name('wikipedia', $delta, $node->type, 'geofield'), '');
            if (strlen($geo_field_name)) {

              $point = geo_value($node->{$geo_field_name}[0]['wkb'], 'array', 'wkb');
              $max_results = variable_get(_whami_source_adapter_conf_variable_name('wikipedia', $delta, $node->type, 'max_results'), 10);
              $radius = variable_get(_whami_source_adapter_conf_variable_name('wikipedia', $delta, $node->type, 'radius'), 10);

              $wikipedia_data = whami_source_adapter_wikipedia_geopoint_radius($point['lat'], $point['lon'], $radius, $langcode, $max_results);
              $block['subject'] = t('Wikipedia Places nearby');
              $block['content'] = theme('whami_source_adapter_wikipedia_content', $wikipedia_data);
            }

          }

          if(strcmp($delta, 'whami_wikipedia_place_by_url') == 0) {

            $link_field_name = variable_get(_whami_source_adapter_conf_variable_name('wikipedia', $delta, $node->type, 'linkfield'), '');
            if (strlen($link_field_name)) {
              $wiki_link = $node->{$link_field_name}[0]['url'];
              $wiki_link = html_entity_decode($wiki_link, ENT_QUOTES, 'UTF-8');

              $wikipedia_data = whami_source_adapter_wikipedia_get_place_by_url($wiki_link, $node_lang);
              $block['subject'] = t('Wikipedia Place Info');
              $block['content'] = theme('whami_source_adapter_wikipedia_content', $wikipedia_data);
            }
          }

          return $block;
        }

      }
  }
}

/**
 * Implements hook_theme().
 */
function whami_source_adapter_wikipedia_theme($existing, $type, $theme, $path) {
  return array(
    'whami_source_adapter_wikipedia_content' => array(
      'arguments' => array('wikipedia_data' => array()),
      'template' => 'whami_source_adapter_wikipedia',
    ),
  );
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_whami_source_adapter_wikipedia_content(&$variables) {
  if (!empty($variables['wikipedia_data'])) {
    $list_items = array();

    $list_attributes = array(
      'class' => 'whami-source-adapter-wikipedia-list',
      'style' => 'list-style: none',
    );

    foreach ($variables['wikipedia_data'] as $key => $entry) {
      $item_content = l($entry['title'], $entry['full_url']);

      $logo_path = drupal_get_path('module', 'whami_source_adapter_wikipedia') . '/images/' . 'wikipedia-logo.png';

      $logo_attributes = array(
        'width' => '34px',
        'height' => '34px',
        'style' => 'float: right',
      );

      $item_content .= l(theme('image', $logo_path, $entry['title'], $entry['title'], $logo_attributes), $entry['full_url'], array('html' => TRUE));

      $item_content .= '<p>' . check_plain($entry['body']) . '</p>';

      $list_items[] = array(
        'data' => $item_content,
        'class' => 'whami-source-adapter-wikipedia-item',
        'id' => 'whami-source-adapter-wikipedia-item-' . $key,
        'style' => 'list-style: none',
      );

      $variables['license'] = $entry['license'];
    }

    $variables['item_list'] = theme_item_list($list_items, NULL, 'ul', $list_attributes);
  }
}
